- create a client(frontend) folder and a smart_contract(blockchain folder)
- instead of 'create react app' command, we initialize our project using 'Vite'(too good!)
(vite installs, builds and starts our react app in a few sec)
  so enter in directory 'client' and
  - install vite using command 'npm create vite@latest'
  - project name: ./ (since we are already in the folder we want to make our project in)
  - package name: 
  - choose a framework: react
  - variant: react
  run command "npm install"
  run command "npm run dev"
  (it all happened too fast)

  installed tailwindcss via 2 commands refer docs
  (for this tailwind part refer docs or if needed get help from YT but its all obvious)
  but basically with tailwind only tailwind.config.js got installed so now changing everything with respect to what has to be there in accordance to tailwind and shoot vite's react boiler plate.

- to get view on browser hit command "npm run dev"

coming to smart_contracts
- hit command "npm init -y"
(this initializes an empty package json)

coming back to client folder lets start creating our react app
- create components folder having functional components alongwith index.js which exports all these components to our App.jsx which imports all these functional components(through de-structuring) to be used as its ingredients by just placing them as tags.
- copied code from github repo for index.css
- now back to components with respective explanations given in each files.
- got images(3) from github repo.
- 
- command "npm install react-icons"
  command "npm install --save ethers"
ethers allows us to interact with blockchain and smart contracts.
- 
- 'mf' is a mediaquery which doesn't exist in tailwind docs since they didn't made it but instead we will make it, so for this go to tailwind.config.js

TIPS:
- double click to select a word, then click alt and do same for selecting other words simultaneously.
- add '-p' to 2nd command i.e. 'npx tailwindcss init' to get made tailwind.config.js file
- 

REALISED:
realised how great is vite, can't thanks enough those devs who made this.. i can talk about it and how it helped me for quite some time.

Errors:
- in tailwind.config.js, it was, {html, js}, though my App.jsx was jsx so replaced it with {html, jsx}
error was, could not find any classes

<!-- Navbar -->
<!--  -->
import { RiMenu4Line } from "react-icons/ri";
import { AiOutlineClose } from "react-icons/ai";
observed some pattern? read docs-> https://react-icons.github.io/react-icons
<!--  -->
// import React from "react";
// const [toggleMenu, setToggleMenu] = React.useState(false);
instead
import { useState } from "react";
const [toggleMenu, setToggleMenu] = useState(false);

the 'React.createElement' used to convert .jsx to .js but with react_v17 now we don't need anymore to import 'react' (gets converted by some other way) but we need either to import react for using hooks like 'useState' or you can even import them directly.

<!-- Loader -->
got how its working...

<!-- for smart_contracts -->
to install hardhat read docs.

npx hardhat compile, command to compile sm-contract
waffle is a framework for writing and testing smartContracts.

<!-- command to run scripts -->
-> npm install @openzeppelin/contracts  , command to install openzeppelin sm-contracts instead of writing dependencies.

-> npx hardhat run scripts/deploy.js --network ropsten
<!-- the compiler version in config needs to be specifically same as in sm-contracts -->

<!-- learn hardhat commands -->

<!-- how smart_contracts met client -->
- as you know we just need 2 things, contract abi and contract address on testnet to interact with the smart contract.
so we make 'utils' folder in 'src', utils manages our abi and contract address and exports them.
- run applications again on localhost network, "npm run dev"
<!-- Cannot find module '@tailwindcss/forms'
so command, npm install -D @tailwindcss/forms
darkmode in tailwind.config.js changed to media now (show in cli) so i changed then
purge changed to content (as shown in cli with doc link) so i changed then -->
- in 'context'(also placed in src alongwith utils) we write all our logic which connect both worlds.
- if we go to console and type -> window.ethereum , we find there is an entire object, yes this holds our metamask here.

<!-- pop-up metamask -->
- a button having onclick= {varfunc}, where varfunc has been extracted from useContext()
value must have been given while defining that context.
- check if wallet is connected through useEffect
- now make that connect function
- finally wrap all content of main in that context.

<!--  -->
- added 'currentAccount' to value being given by 'TransactionContext.Provider', so as we can get to know whether wallet is connected or not & now if its connected make the button disappear.
<!-- to set form data -->
- call handleChange in inputs, which has been accessed through context,
which has been set as all accessible and is defined in that same file.
(formData, setFormData, handleChange)

